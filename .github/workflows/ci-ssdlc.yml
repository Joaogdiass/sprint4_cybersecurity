name: CI - SSDLC (build + tests + SAST + SCA + DAST)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: "0 9 * * 1" # auditoria semanal

jobs:
  build_and_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Python example)
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov pyjwt || true

      - name: Run unit + security tests
        run: |
          if [ -d tests ]; then pytest -q tests --maxfail=1 --disable-warnings; else echo "No tests"; fi

  # SAST (Semgrep) — action oficial; gera/publica SARIF
  sast_semgrep:
    runs-on: ubuntu-latest
    needs: build_and_tests
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep (SAST + project rules)
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            semgrep-rules/secure.yml
        # Se tiver conta no semgrep.dev, opcional:
        # env:
        #   SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # SCA (OWASP Dependency-Check) — via Docker oficial (evita problema de action)
  sca_dependencies:
    runs-on: ubuntu-latest
    needs: build_and_tests
    steps:
      - uses: actions/checkout@v4

      - name: Run OWASP Dependency-Check (Docker)
        run: |
          mkdir -p reports
          docker pull owasp/dependency-check:latest
          docker run --rm \
            -e NVD_API_KEY=${{ secrets.NVD_API_KEY }} \
            -v "$PWD":/src \
            -v "$PWD/reports":/report \
            owasp/dependency-check:latest \
            --project "Sprint3" \
            --scan /src \
            --format "HTML" \
            --out /report \
            --failOnCVSS 7.0

      - name: Upload SCA Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/dependency-check-report.html

  # DAST (OWASP ZAP) — sobe um alvo simples para evitar “connection refused”
  dast_zap:
    runs-on: ubuntu-latest
    needs: build_and_tests
    steps:
      - uses: actions/checkout@v4

      - name: Start simple HTTP server as target
        run: |
          echo "<html><h1>Sprint Security Target</h1></html>" > index.html
          python -m http.server 8000 &
          for i in {1..20}; do
            if curl -sSf http://localhost:8000 >/dev/null; then echo "Target up"; break; fi
            sleep 1
          done

      - name: ZAP Baseline (DAST)
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:8000'
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_action: true
          rules_file_name: 'zap-rules.tsv'
